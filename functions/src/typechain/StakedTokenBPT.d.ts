/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface StakedTokenBPTInterface extends ethers.utils.Interface {
  functions: {
    'BAL()': FunctionFragment
    'COOLDOWN_SECONDS()': FunctionFragment
    'DURATION()': FunctionFragment
    'REWARDS_TOKEN()': FunctionFragment
    'STAKED_TOKEN()': FunctionFragment
    'UNSTAKE_WINDOW()': FunctionFragment
    '__StakedToken_init(bytes32,bytes32,address)': FunctionFragment
    'applyQuestMultiplier(address,uint8)': FunctionFragment
    'balRecipient()': FunctionFragment
    'balanceData(address)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'balancerVault()': FunctionFragment
    'blackListWrapper(address)': FunctionFragment
    'calcRedemptionFeeRate(uint32)': FunctionFragment
    'changeSlashingPercentage(uint256)': FunctionFragment
    'checkpoints(address,uint32)': FunctionFragment
    'claimBal()': FunctionFragment
    'claimReward()': FunctionFragment
    'convertFees()': FunctionFragment
    'createLock(uint256,uint256)': FunctionFragment
    'decimals()': FunctionFragment
    'delegate(address)': FunctionFragment
    'delegates(address)': FunctionFragment
    'earned(address)': FunctionFragment
    'emergencyRecollateralisation()': FunctionFragment
    'endCooldown()': FunctionFragment
    'exit()': FunctionFragment
    'fetchPriceCoefficient()': FunctionFragment
    'getPastTotalSupply(uint256)': FunctionFragment
    'getPastVotes(address,uint256)': FunctionFragment
    'getProspectivePriceCoefficient()': FunctionFragment
    'getRewardToken()': FunctionFragment
    'getVotes(address)': FunctionFragment
    'globalData()': FunctionFragment
    'hasPriceCoeff()': FunctionFragment
    'increaseLockAmount(uint256)': FunctionFragment
    'increaseLockLength(uint256)': FunctionFragment
    'initialize(bytes32,bytes32,address,address,uint256)': FunctionFragment
    'keeper()': FunctionFragment
    'lastPriceUpdateTime()': FunctionFragment
    'lastTimeRewardApplicable()': FunctionFragment
    'name()': FunctionFragment
    'nexus()': FunctionFragment
    'notifyRewardAmount(uint256)': FunctionFragment
    'numCheckpoints(address)': FunctionFragment
    'pendingAdditionalReward()': FunctionFragment
    'pendingBPTFees()': FunctionFragment
    'poolId()': FunctionFragment
    'priceCoefficient()': FunctionFragment
    'questManager()': FunctionFragment
    'rawBalanceOf(address)': FunctionFragment
    'reviewTimestamp(address)': FunctionFragment
    'rewardPerToken()': FunctionFragment
    'rewardTokenVendor()': FunctionFragment
    'rewardsDistributor()': FunctionFragment
    'safetyData()': FunctionFragment
    'setBalRecipient(address)': FunctionFragment
    'setGovernanceHook(address)': FunctionFragment
    'setKeeper(address)': FunctionFragment
    'setRewardsDistribution(address)': FunctionFragment
    'stake(uint256,address)': FunctionFragment
    'startCooldown(uint256)': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'userData(address)': FunctionFragment
    'userPriceCoeff(address)': FunctionFragment
    'whitelistWrapper(address)': FunctionFragment
    'whitelistedWrappers(address)': FunctionFragment
    'withdraw(uint256,address,bool,bool)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'BAL', values?: undefined): string
  encodeFunctionData(functionFragment: 'COOLDOWN_SECONDS', values?: undefined): string
  encodeFunctionData(functionFragment: 'DURATION', values?: undefined): string
  encodeFunctionData(functionFragment: 'REWARDS_TOKEN', values?: undefined): string
  encodeFunctionData(functionFragment: 'STAKED_TOKEN', values?: undefined): string
  encodeFunctionData(functionFragment: 'UNSTAKE_WINDOW', values?: undefined): string
  encodeFunctionData(functionFragment: '__StakedToken_init', values: [BytesLike, BytesLike, string]): string
  encodeFunctionData(functionFragment: 'applyQuestMultiplier', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'balRecipient', values?: undefined): string
  encodeFunctionData(functionFragment: 'balanceData', values: [string]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'balancerVault', values?: undefined): string
  encodeFunctionData(functionFragment: 'blackListWrapper', values: [string]): string
  encodeFunctionData(functionFragment: 'calcRedemptionFeeRate', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'changeSlashingPercentage', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'checkpoints', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'claimBal', values?: undefined): string
  encodeFunctionData(functionFragment: 'claimReward', values?: undefined): string
  encodeFunctionData(functionFragment: 'convertFees', values?: undefined): string
  encodeFunctionData(functionFragment: 'createLock', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(functionFragment: 'delegate', values: [string]): string
  encodeFunctionData(functionFragment: 'delegates', values: [string]): string
  encodeFunctionData(functionFragment: 'earned', values: [string]): string
  encodeFunctionData(functionFragment: 'emergencyRecollateralisation', values?: undefined): string
  encodeFunctionData(functionFragment: 'endCooldown', values?: undefined): string
  encodeFunctionData(functionFragment: 'exit', values?: undefined): string
  encodeFunctionData(functionFragment: 'fetchPriceCoefficient', values?: undefined): string
  encodeFunctionData(functionFragment: 'getPastTotalSupply', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getPastVotes', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getProspectivePriceCoefficient', values?: undefined): string
  encodeFunctionData(functionFragment: 'getRewardToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'getVotes', values: [string]): string
  encodeFunctionData(functionFragment: 'globalData', values?: undefined): string
  encodeFunctionData(functionFragment: 'hasPriceCoeff', values?: undefined): string
  encodeFunctionData(functionFragment: 'increaseLockAmount', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'increaseLockLength', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'initialize', values: [BytesLike, BytesLike, string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string
  encodeFunctionData(functionFragment: 'lastPriceUpdateTime', values?: undefined): string
  encodeFunctionData(functionFragment: 'lastTimeRewardApplicable', values?: undefined): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'nexus', values?: undefined): string
  encodeFunctionData(functionFragment: 'notifyRewardAmount', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'numCheckpoints', values: [string]): string
  encodeFunctionData(functionFragment: 'pendingAdditionalReward', values?: undefined): string
  encodeFunctionData(functionFragment: 'pendingBPTFees', values?: undefined): string
  encodeFunctionData(functionFragment: 'poolId', values?: undefined): string
  encodeFunctionData(functionFragment: 'priceCoefficient', values?: undefined): string
  encodeFunctionData(functionFragment: 'questManager', values?: undefined): string
  encodeFunctionData(functionFragment: 'rawBalanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'reviewTimestamp', values: [string]): string
  encodeFunctionData(functionFragment: 'rewardPerToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'rewardTokenVendor', values?: undefined): string
  encodeFunctionData(functionFragment: 'rewardsDistributor', values?: undefined): string
  encodeFunctionData(functionFragment: 'safetyData', values?: undefined): string
  encodeFunctionData(functionFragment: 'setBalRecipient', values: [string]): string
  encodeFunctionData(functionFragment: 'setGovernanceHook', values: [string]): string
  encodeFunctionData(functionFragment: 'setKeeper', values: [string]): string
  encodeFunctionData(functionFragment: 'setRewardsDistribution', values: [string]): string
  encodeFunctionData(functionFragment: 'stake', values: [BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'startCooldown', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'userData', values: [string]): string
  encodeFunctionData(functionFragment: 'userPriceCoeff', values: [string]): string
  encodeFunctionData(functionFragment: 'whitelistWrapper', values: [string]): string
  encodeFunctionData(functionFragment: 'whitelistedWrappers', values: [string]): string
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, string, boolean, boolean]): string

  decodeFunctionResult(functionFragment: 'BAL', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'COOLDOWN_SECONDS', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'DURATION', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'REWARDS_TOKEN', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'STAKED_TOKEN', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'UNSTAKE_WINDOW', data: BytesLike): Result
  decodeFunctionResult(functionFragment: '__StakedToken_init', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'applyQuestMultiplier', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balRecipient', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balancerVault', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'blackListWrapper', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'calcRedemptionFeeRate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'changeSlashingPercentage', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkpoints', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimBal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'convertFees', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'createLock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'delegate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'delegates', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'earned', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'emergencyRecollateralisation', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'endCooldown', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'fetchPriceCoefficient', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPastTotalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPastVotes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getProspectivePriceCoefficient', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRewardToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getVotes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'globalData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasPriceCoeff', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'increaseLockAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'increaseLockLength', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'lastPriceUpdateTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'lastTimeRewardApplicable', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nexus', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'notifyRewardAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'numCheckpoints', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pendingAdditionalReward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pendingBPTFees', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'priceCoefficient', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'questManager', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rawBalanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'reviewTimestamp', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewardPerToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewardTokenVendor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewardsDistributor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'safetyData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setBalRecipient', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setGovernanceHook', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setKeeper', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setRewardsDistribution', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'startCooldown', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'userData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'userPriceCoeff', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'whitelistWrapper', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'whitelistedWrappers', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'BalClaimed()': EventFragment
    'BalRecipientChanged(address)': EventFragment
    'Cooldown(address,uint256)': EventFragment
    'CooldownExited(address)': EventFragment
    'DelegateChanged(address,address,address)': EventFragment
    'DelegateVotesChanged(address,uint256,uint256)': EventFragment
    'GovernanceHookChanged(address)': EventFragment
    'KeeperUpdated(address)': EventFragment
    'PriceCoefficientUpdated(uint256)': EventFragment
    'Recollateralised()': EventFragment
    'RewardAdded(uint256)': EventFragment
    'RewardPaid(address,address,uint256)': EventFragment
    'SlashRateChanged(uint256)': EventFragment
    'Staked(address,uint256,address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Withdraw(address,address,uint256)': EventFragment
    'WrapperBlacklisted(address)': EventFragment
    'WrapperWhitelisted(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BalClaimed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BalRecipientChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Cooldown'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CooldownExited'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DelegateChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DelegateVotesChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'GovernanceHookChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'KeeperUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PriceCoefficientUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Recollateralised'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SlashRateChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WrapperBlacklisted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WrapperWhitelisted'): EventFragment
}

export class StakedTokenBPT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: StakedTokenBPTInterface

  functions: {
    BAL(overrides?: CallOverrides): Promise<[string]>

    COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>

    DURATION(overrides?: CallOverrides): Promise<[BigNumber]>

    REWARDS_TOKEN(overrides?: CallOverrides): Promise<[string]>

    STAKED_TOKEN(overrides?: CallOverrides): Promise<[string]>

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<[BigNumber]>

    __StakedToken_init(
      _nameArg: BytesLike,
      _symbolArg: BytesLike,
      _rewardsDistributorArg: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    applyQuestMultiplier(
      _account: string,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    balRecipient(overrides?: CallOverrides): Promise<[string]>

    balanceData(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, number, number, number, number, BigNumber] & {
          raw: BigNumber
          weightedTimestamp: number
          timeMultiplier: number
          questMultiplier: number
          cooldownTimestamp: number
          cooldownUnits: BigNumber
        },
      ]
    >

    balanceOf(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    balancerVault(overrides?: CallOverrides): Promise<[string]>

    blackListWrapper(_wrapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    calcRedemptionFeeRate(_weightedTimestamp: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { _feeRate: BigNumber }>

    changeSlashingPercentage(
      _newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    checkpoints(
      account: string,
      pos: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[[number, BigNumber] & { fromBlock: number; votes: BigNumber }]>

    claimBal(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    'claimReward()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    'claimReward(address)'(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    convertFees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    createLock(
      _value: BigNumberish,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    delegate(delegatee: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    delegates(account: string, overrides?: CallOverrides): Promise<[string]>

    earned(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    emergencyRecollateralisation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    endCooldown(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    exit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    fetchPriceCoefficient(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    getPastTotalSupply(blockNumber: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    getPastVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    getProspectivePriceCoefficient(overrides?: CallOverrides): Promise<[BigNumber] & { newPriceCoeff: BigNumber }>

    getRewardToken(overrides?: CallOverrides): Promise<[string]>

    getVotes(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    globalData(overrides?: CallOverrides): Promise<
      [number, number, BigNumber, BigNumber] & {
        periodFinish: number
        lastUpdateTime: number
        rewardRate: BigNumber
        rewardPerTokenStored: BigNumber
      }
    >

    hasPriceCoeff(overrides?: CallOverrides): Promise<[boolean]>

    increaseLockAmount(_value: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    increaseLockLength(arg0: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    initialize(
      _nameArg: BytesLike,
      _symbolArg: BytesLike,
      _rewardsDistributorArg: string,
      _balRecipient: string,
      _priceCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    keeper(overrides?: CallOverrides): Promise<[string]>

    lastPriceUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<[BigNumber]>

    name(overrides?: CallOverrides): Promise<[string]>

    nexus(overrides?: CallOverrides): Promise<[string]>

    notifyRewardAmount(_reward: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    numCheckpoints(account: string, overrides?: CallOverrides): Promise<[number]>

    pendingAdditionalReward(overrides?: CallOverrides): Promise<[BigNumber]>

    pendingBPTFees(overrides?: CallOverrides): Promise<[BigNumber]>

    poolId(overrides?: CallOverrides): Promise<[string]>

    priceCoefficient(overrides?: CallOverrides): Promise<[BigNumber]>

    questManager(overrides?: CallOverrides): Promise<[string]>

    rawBalanceOf(_account: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>

    reviewTimestamp(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>

    rewardTokenVendor(overrides?: CallOverrides): Promise<[string]>

    rewardsDistributor(overrides?: CallOverrides): Promise<[string]>

    safetyData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        collateralisationRatio: BigNumber
        slashingPercentage: BigNumber
      }
    >

    setBalRecipient(_newRecipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    setGovernanceHook(_newHook: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    setKeeper(_newKeeper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    setRewardsDistribution(
      _rewardsDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'stake(uint256,address)'(
      _amount: BigNumberish,
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'stake(uint256)'(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    'stake(uint256,bool)'(
      _amount: BigNumberish,
      _exitCooldown: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    startCooldown(_units: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    userData(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardPerTokenPaid: BigNumber
        rewards: BigNumber
      }
    >

    userPriceCoeff(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    whitelistWrapper(_wrapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    whitelistedWrappers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    withdraw(
      _amount: BigNumberish,
      _recipient: string,
      _amountIncludesFee: boolean,
      _exitCooldown: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  BAL(overrides?: CallOverrides): Promise<string>

  COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>

  DURATION(overrides?: CallOverrides): Promise<BigNumber>

  REWARDS_TOKEN(overrides?: CallOverrides): Promise<string>

  STAKED_TOKEN(overrides?: CallOverrides): Promise<string>

  UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>

  __StakedToken_init(
    _nameArg: BytesLike,
    _symbolArg: BytesLike,
    _rewardsDistributorArg: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  applyQuestMultiplier(
    _account: string,
    _newMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  balRecipient(overrides?: CallOverrides): Promise<string>

  balanceData(
    _account: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, number, number, number, number, BigNumber] & {
      raw: BigNumber
      weightedTimestamp: number
      timeMultiplier: number
      questMultiplier: number
      cooldownTimestamp: number
      cooldownUnits: BigNumber
    }
  >

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>

  balancerVault(overrides?: CallOverrides): Promise<string>

  blackListWrapper(_wrapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  calcRedemptionFeeRate(_weightedTimestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  changeSlashingPercentage(
    _newRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  checkpoints(
    account: string,
    pos: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>

  claimBal(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  'claimReward()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  'claimReward(address)'(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  convertFees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  createLock(
    _value: BigNumberish,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  delegate(delegatee: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  delegates(account: string, overrides?: CallOverrides): Promise<string>

  earned(_account: string, overrides?: CallOverrides): Promise<BigNumber>

  emergencyRecollateralisation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  endCooldown(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  exit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  fetchPriceCoefficient(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  getPastTotalSupply(blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  getPastVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  getProspectivePriceCoefficient(overrides?: CallOverrides): Promise<BigNumber>

  getRewardToken(overrides?: CallOverrides): Promise<string>

  getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>

  globalData(overrides?: CallOverrides): Promise<
    [number, number, BigNumber, BigNumber] & {
      periodFinish: number
      lastUpdateTime: number
      rewardRate: BigNumber
      rewardPerTokenStored: BigNumber
    }
  >

  hasPriceCoeff(overrides?: CallOverrides): Promise<boolean>

  increaseLockAmount(_value: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  increaseLockLength(arg0: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  initialize(
    _nameArg: BytesLike,
    _symbolArg: BytesLike,
    _rewardsDistributorArg: string,
    _balRecipient: string,
    _priceCoefficient: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  keeper(overrides?: CallOverrides): Promise<string>

  lastPriceUpdateTime(overrides?: CallOverrides): Promise<BigNumber>

  lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>

  name(overrides?: CallOverrides): Promise<string>

  nexus(overrides?: CallOverrides): Promise<string>

  notifyRewardAmount(_reward: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  numCheckpoints(account: string, overrides?: CallOverrides): Promise<number>

  pendingAdditionalReward(overrides?: CallOverrides): Promise<BigNumber>

  pendingBPTFees(overrides?: CallOverrides): Promise<BigNumber>

  poolId(overrides?: CallOverrides): Promise<string>

  priceCoefficient(overrides?: CallOverrides): Promise<BigNumber>

  questManager(overrides?: CallOverrides): Promise<string>

  rawBalanceOf(_account: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>

  reviewTimestamp(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>

  rewardTokenVendor(overrides?: CallOverrides): Promise<string>

  rewardsDistributor(overrides?: CallOverrides): Promise<string>

  safetyData(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      collateralisationRatio: BigNumber
      slashingPercentage: BigNumber
    }
  >

  setBalRecipient(_newRecipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  setGovernanceHook(_newHook: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  setKeeper(_newKeeper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  setRewardsDistribution(
    _rewardsDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'stake(uint256,address)'(
    _amount: BigNumberish,
    _delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'stake(uint256)'(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  'stake(uint256,bool)'(
    _amount: BigNumberish,
    _exitCooldown: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  startCooldown(_units: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  userData(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      rewardPerTokenPaid: BigNumber
      rewards: BigNumber
    }
  >

  userPriceCoeff(_account: string, overrides?: CallOverrides): Promise<BigNumber>

  whitelistWrapper(_wrapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  whitelistedWrappers(arg0: string, overrides?: CallOverrides): Promise<boolean>

  withdraw(
    _amount: BigNumberish,
    _recipient: string,
    _amountIncludesFee: boolean,
    _exitCooldown: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    BAL(overrides?: CallOverrides): Promise<string>

    COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>

    DURATION(overrides?: CallOverrides): Promise<BigNumber>

    REWARDS_TOKEN(overrides?: CallOverrides): Promise<string>

    STAKED_TOKEN(overrides?: CallOverrides): Promise<string>

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>

    __StakedToken_init(_nameArg: BytesLike, _symbolArg: BytesLike, _rewardsDistributorArg: string, overrides?: CallOverrides): Promise<void>

    applyQuestMultiplier(_account: string, _newMultiplier: BigNumberish, overrides?: CallOverrides): Promise<void>

    balRecipient(overrides?: CallOverrides): Promise<string>

    balanceData(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, number, number, number, BigNumber] & {
        raw: BigNumber
        weightedTimestamp: number
        timeMultiplier: number
        questMultiplier: number
        cooldownTimestamp: number
        cooldownUnits: BigNumber
      }
    >

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>

    balancerVault(overrides?: CallOverrides): Promise<string>

    blackListWrapper(_wrapper: string, overrides?: CallOverrides): Promise<void>

    calcRedemptionFeeRate(_weightedTimestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    changeSlashingPercentage(_newRate: BigNumberish, overrides?: CallOverrides): Promise<void>

    checkpoints(
      account: string,
      pos: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>

    claimBal(overrides?: CallOverrides): Promise<void>

    'claimReward()'(overrides?: CallOverrides): Promise<void>

    'claimReward(address)'(_to: string, overrides?: CallOverrides): Promise<void>

    convertFees(overrides?: CallOverrides): Promise<void>

    createLock(_value: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<void>

    decimals(overrides?: CallOverrides): Promise<number>

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>

    delegates(account: string, overrides?: CallOverrides): Promise<string>

    earned(_account: string, overrides?: CallOverrides): Promise<BigNumber>

    emergencyRecollateralisation(overrides?: CallOverrides): Promise<void>

    endCooldown(overrides?: CallOverrides): Promise<void>

    exit(overrides?: CallOverrides): Promise<void>

    fetchPriceCoefficient(overrides?: CallOverrides): Promise<void>

    getPastTotalSupply(blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getPastVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getProspectivePriceCoefficient(overrides?: CallOverrides): Promise<BigNumber>

    getRewardToken(overrides?: CallOverrides): Promise<string>

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>

    globalData(overrides?: CallOverrides): Promise<
      [number, number, BigNumber, BigNumber] & {
        periodFinish: number
        lastUpdateTime: number
        rewardRate: BigNumber
        rewardPerTokenStored: BigNumber
      }
    >

    hasPriceCoeff(overrides?: CallOverrides): Promise<boolean>

    increaseLockAmount(_value: BigNumberish, overrides?: CallOverrides): Promise<void>

    increaseLockLength(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>

    initialize(
      _nameArg: BytesLike,
      _symbolArg: BytesLike,
      _rewardsDistributorArg: string,
      _balRecipient: string,
      _priceCoefficient: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    keeper(overrides?: CallOverrides): Promise<string>

    lastPriceUpdateTime(overrides?: CallOverrides): Promise<BigNumber>

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<string>

    nexus(overrides?: CallOverrides): Promise<string>

    notifyRewardAmount(_reward: BigNumberish, overrides?: CallOverrides): Promise<void>

    numCheckpoints(account: string, overrides?: CallOverrides): Promise<number>

    pendingAdditionalReward(overrides?: CallOverrides): Promise<BigNumber>

    pendingBPTFees(overrides?: CallOverrides): Promise<BigNumber>

    poolId(overrides?: CallOverrides): Promise<string>

    priceCoefficient(overrides?: CallOverrides): Promise<BigNumber>

    questManager(overrides?: CallOverrides): Promise<string>

    rawBalanceOf(_account: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>

    reviewTimestamp(_account: string, overrides?: CallOverrides): Promise<void>

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>

    rewardTokenVendor(overrides?: CallOverrides): Promise<string>

    rewardsDistributor(overrides?: CallOverrides): Promise<string>

    safetyData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        collateralisationRatio: BigNumber
        slashingPercentage: BigNumber
      }
    >

    setBalRecipient(_newRecipient: string, overrides?: CallOverrides): Promise<void>

    setGovernanceHook(_newHook: string, overrides?: CallOverrides): Promise<void>

    setKeeper(_newKeeper: string, overrides?: CallOverrides): Promise<void>

    setRewardsDistribution(_rewardsDistributor: string, overrides?: CallOverrides): Promise<void>

    'stake(uint256,address)'(_amount: BigNumberish, _delegatee: string, overrides?: CallOverrides): Promise<void>

    'stake(uint256)'(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    'stake(uint256,bool)'(_amount: BigNumberish, _exitCooldown: boolean, overrides?: CallOverrides): Promise<void>

    startCooldown(_units: BigNumberish, overrides?: CallOverrides): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    userData(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardPerTokenPaid: BigNumber
        rewards: BigNumber
      }
    >

    userPriceCoeff(_account: string, overrides?: CallOverrides): Promise<BigNumber>

    whitelistWrapper(_wrapper: string, overrides?: CallOverrides): Promise<void>

    whitelistedWrappers(arg0: string, overrides?: CallOverrides): Promise<boolean>

    withdraw(
      _amount: BigNumberish,
      _recipient: string,
      _amountIncludesFee: boolean,
      _exitCooldown: boolean,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>

    BalClaimed(): TypedEventFilter<[], {}>

    BalRecipientChanged(newRecipient?: null): TypedEventFilter<[string], { newRecipient: string }>

    Cooldown(user?: string | null, percentage?: null): TypedEventFilter<[string, BigNumber], { user: string; percentage: BigNumber }>

    CooldownExited(user?: string | null): TypedEventFilter<[string], { user: string }>

    DelegateChanged(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null,
    ): TypedEventFilter<[string, string, string], { delegator: string; fromDelegate: string; toDelegate: string }>

    DelegateVotesChanged(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null,
    ): TypedEventFilter<[string, BigNumber, BigNumber], { delegate: string; previousBalance: BigNumber; newBalance: BigNumber }>

    GovernanceHookChanged(hook?: string | null): TypedEventFilter<[string], { hook: string }>

    KeeperUpdated(newKeeper?: null): TypedEventFilter<[string], { newKeeper: string }>

    PriceCoefficientUpdated(newPriceCoeff?: null): TypedEventFilter<[BigNumber], { newPriceCoeff: BigNumber }>

    Recollateralised(): TypedEventFilter<[], {}>

    RewardAdded(reward?: null): TypedEventFilter<[BigNumber], { reward: BigNumber }>

    RewardPaid(
      user?: string | null,
      to?: string | null,
      reward?: null,
    ): TypedEventFilter<[string, string, BigNumber], { user: string; to: string; reward: BigNumber }>

    SlashRateChanged(newRate?: null): TypedEventFilter<[BigNumber], { newRate: BigNumber }>

    Staked(
      user?: string | null,
      amount?: null,
      delegatee?: null,
    ): TypedEventFilter<[string, BigNumber, string], { user: string; amount: BigNumber; delegatee: string }>

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>

    Withdraw(
      user?: string | null,
      to?: string | null,
      amount?: null,
    ): TypedEventFilter<[string, string, BigNumber], { user: string; to: string; amount: BigNumber }>

    WrapperBlacklisted(wallet?: null): TypedEventFilter<[string], { wallet: string }>

    WrapperWhitelisted(wallet?: null): TypedEventFilter<[string], { wallet: string }>
  }

  estimateGas: {
    BAL(overrides?: CallOverrides): Promise<BigNumber>

    COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>

    DURATION(overrides?: CallOverrides): Promise<BigNumber>

    REWARDS_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

    STAKED_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>

    __StakedToken_init(
      _nameArg: BytesLike,
      _symbolArg: BytesLike,
      _rewardsDistributorArg: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    applyQuestMultiplier(
      _account: string,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    balRecipient(overrides?: CallOverrides): Promise<BigNumber>

    balanceData(_account: string, overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>

    balancerVault(overrides?: CallOverrides): Promise<BigNumber>

    blackListWrapper(_wrapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    calcRedemptionFeeRate(_weightedTimestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    changeSlashingPercentage(_newRate: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    checkpoints(account: string, pos: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    claimBal(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    'claimReward()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    'claimReward(address)'(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    convertFees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    createLock(_value: BigNumberish, arg1: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    delegate(delegatee: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    delegates(account: string, overrides?: CallOverrides): Promise<BigNumber>

    earned(_account: string, overrides?: CallOverrides): Promise<BigNumber>

    emergencyRecollateralisation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    endCooldown(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    exit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    fetchPriceCoefficient(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    getPastTotalSupply(blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getPastVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getProspectivePriceCoefficient(overrides?: CallOverrides): Promise<BigNumber>

    getRewardToken(overrides?: CallOverrides): Promise<BigNumber>

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>

    globalData(overrides?: CallOverrides): Promise<BigNumber>

    hasPriceCoeff(overrides?: CallOverrides): Promise<BigNumber>

    increaseLockAmount(_value: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    increaseLockLength(arg0: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    initialize(
      _nameArg: BytesLike,
      _symbolArg: BytesLike,
      _rewardsDistributorArg: string,
      _balRecipient: string,
      _priceCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    keeper(overrides?: CallOverrides): Promise<BigNumber>

    lastPriceUpdateTime(overrides?: CallOverrides): Promise<BigNumber>

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    nexus(overrides?: CallOverrides): Promise<BigNumber>

    notifyRewardAmount(_reward: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    numCheckpoints(account: string, overrides?: CallOverrides): Promise<BigNumber>

    pendingAdditionalReward(overrides?: CallOverrides): Promise<BigNumber>

    pendingBPTFees(overrides?: CallOverrides): Promise<BigNumber>

    poolId(overrides?: CallOverrides): Promise<BigNumber>

    priceCoefficient(overrides?: CallOverrides): Promise<BigNumber>

    questManager(overrides?: CallOverrides): Promise<BigNumber>

    rawBalanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>

    reviewTimestamp(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>

    rewardTokenVendor(overrides?: CallOverrides): Promise<BigNumber>

    rewardsDistributor(overrides?: CallOverrides): Promise<BigNumber>

    safetyData(overrides?: CallOverrides): Promise<BigNumber>

    setBalRecipient(_newRecipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setGovernanceHook(_newHook: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setKeeper(_newKeeper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setRewardsDistribution(_rewardsDistributor: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    'stake(uint256,address)'(
      _amount: BigNumberish,
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'stake(uint256)'(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    'stake(uint256,bool)'(
      _amount: BigNumberish,
      _exitCooldown: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    startCooldown(_units: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    userData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    userPriceCoeff(_account: string, overrides?: CallOverrides): Promise<BigNumber>

    whitelistWrapper(_wrapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    whitelistedWrappers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    withdraw(
      _amount: BigNumberish,
      _recipient: string,
      _amountIncludesFee: boolean,
      _exitCooldown: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    BAL(overrides?: CallOverrides): Promise<PopulatedTransaction>

    COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<PopulatedTransaction>

    DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>

    REWARDS_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    STAKED_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<PopulatedTransaction>

    __StakedToken_init(
      _nameArg: BytesLike,
      _symbolArg: BytesLike,
      _rewardsDistributorArg: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    applyQuestMultiplier(
      _account: string,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    balRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceData(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOf(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    balancerVault(overrides?: CallOverrides): Promise<PopulatedTransaction>

    blackListWrapper(_wrapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    calcRedemptionFeeRate(_weightedTimestamp: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    changeSlashingPercentage(
      _newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    checkpoints(account: string, pos: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    claimBal(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    'claimReward()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    'claimReward(address)'(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    convertFees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    createLock(
      _value: BigNumberish,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    delegate(delegatee: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    delegates(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    earned(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    emergencyRecollateralisation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    endCooldown(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    exit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    fetchPriceCoefficient(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    getPastTotalSupply(blockNumber: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPastVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getProspectivePriceCoefficient(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getVotes(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    globalData(overrides?: CallOverrides): Promise<PopulatedTransaction>

    hasPriceCoeff(overrides?: CallOverrides): Promise<PopulatedTransaction>

    increaseLockAmount(_value: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    increaseLockLength(arg0: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    initialize(
      _nameArg: BytesLike,
      _symbolArg: BytesLike,
      _rewardsDistributorArg: string,
      _balRecipient: string,
      _priceCoefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>

    lastPriceUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nexus(overrides?: CallOverrides): Promise<PopulatedTransaction>

    notifyRewardAmount(_reward: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    numCheckpoints(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    pendingAdditionalReward(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pendingBPTFees(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    priceCoefficient(overrides?: CallOverrides): Promise<PopulatedTransaction>

    questManager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rawBalanceOf(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    reviewTimestamp(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rewardTokenVendor(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rewardsDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>

    safetyData(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setBalRecipient(_newRecipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    setGovernanceHook(_newHook: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    setKeeper(_newKeeper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    setRewardsDistribution(
      _rewardsDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'stake(uint256,address)'(
      _amount: BigNumberish,
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'stake(uint256)'(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    'stake(uint256,bool)'(
      _amount: BigNumberish,
      _exitCooldown: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    startCooldown(_units: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    userData(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    userPriceCoeff(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    whitelistWrapper(_wrapper: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    whitelistedWrappers(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdraw(
      _amount: BigNumberish,
      _recipient: string,
      _amountIncludesFee: boolean,
      _exitCooldown: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
