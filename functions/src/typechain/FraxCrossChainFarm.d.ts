/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FraxCrossChainFarmInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "addMigrator(address)": FunctionFragment;
    "calcCurCombinedWeight(address)": FunctionFragment;
    "combinedWeightOf(address)": FunctionFragment;
    "controller_address()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "fraxPerLPToken()": FunctionFragment;
    "getReward()": FunctionFragment;
    "getRewardForDuration()": FunctionFragment;
    "greylist(address)": FunctionFragment;
    "greylistAddress(address)": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "lockMultiplier(uint256)": FunctionFragment;
    "lock_max_multiplier()": FunctionFragment;
    "lock_time_for_max_multiplier()": FunctionFragment;
    "lock_time_min()": FunctionFragment;
    "lockedLiquidityOf(address)": FunctionFragment;
    "lockedStakesOf(address)": FunctionFragment;
    "migrationsOn()": FunctionFragment;
    "migrator_stakeLocked_for(address,uint256,uint256,uint256)": FunctionFragment;
    "migrator_withdraw_locked(address,bytes32)": FunctionFragment;
    "minVeFXSForMaxBoost(address)": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "periodFinish()": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "removeMigrator(address)": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "rewardRate0()": FunctionFragment;
    "rewardRate1()": FunctionFragment;
    "rewards0(address)": FunctionFragment;
    "rewards1(address)": FunctionFragment;
    "rewardsCollectionPaused()": FunctionFragment;
    "rewardsDuration()": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setLockedStakeTimeForMinAndMaxMultiplier(uint256,uint256)": FunctionFragment;
    "setMultipliers(uint256,uint256,uint256)": FunctionFragment;
    "setRewardsDuration(uint256)": FunctionFragment;
    "setTimelock(address)": FunctionFragment;
    "setVeFXS(address)": FunctionFragment;
    "stakeLocked(uint256,uint256)": FunctionFragment;
    "stakerAllowMigrator(address)": FunctionFragment;
    "stakerDisallowMigrator(address)": FunctionFragment;
    "staker_allowed_migrators(address,address)": FunctionFragment;
    "stakesUnlocked()": FunctionFragment;
    "stakingPaused()": FunctionFragment;
    "sync()": FunctionFragment;
    "timelock_address()": FunctionFragment;
    "toggleMigrations()": FunctionFragment;
    "toggleRewardsCollection()": FunctionFragment;
    "toggleStaking()": FunctionFragment;
    "toggleWithdrawals()": FunctionFragment;
    "totalCombinedWeight()": FunctionFragment;
    "totalLiquidityLocked()": FunctionFragment;
    "ttlRew0Owed()": FunctionFragment;
    "ttlRew0Paid()": FunctionFragment;
    "ttlRew1Owed()": FunctionFragment;
    "ttlRew1Paid()": FunctionFragment;
    "unlockStakes()": FunctionFragment;
    "userRewardPerTokenPaid0(address)": FunctionFragment;
    "userRewardPerTokenPaid1(address)": FunctionFragment;
    "userStakedFrax(address)": FunctionFragment;
    "valid_migrators(address)": FunctionFragment;
    "veFXSMultiplier(address)": FunctionFragment;
    "vefxs_max_multiplier()": FunctionFragment;
    "vefxs_per_frax_for_max_boost()": FunctionFragment;
    "withdrawLocked(bytes32)": FunctionFragment;
    "withdrawalsPaused()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addMigrator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calcCurCombinedWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "combinedWeightOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller_address",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fraxPerLPToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "greylist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "greylistAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lock_max_multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lock_time_for_max_multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lock_time_min",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedLiquidityOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedStakesOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrationsOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrator_stakeLocked_for",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrator_withdraw_locked",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minVeFXSForMaxBoost",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMigrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate1",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards0", values: [string]): string;
  encodeFunctionData(functionFragment: "rewards1", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardsCollectionPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockedStakeTimeForMinAndMaxMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultipliers",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTimelock", values: [string]): string;
  encodeFunctionData(functionFragment: "setVeFXS", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeLocked",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerAllowMigrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerDisallowMigrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "staker_allowed_migrators",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakesUnlocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timelock_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMigrations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleRewardsCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCombinedWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidityLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ttlRew0Owed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ttlRew0Paid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ttlRew1Owed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ttlRew1Paid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockStakes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid0",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid1",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakedFrax",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "valid_migrators",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "veFXSMultiplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vefxs_max_multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vefxs_per_frax_for_max_boost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLocked",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalsPaused",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCurCombinedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combinedWeightOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controller_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fraxPerLPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "greylist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "greylistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_max_multiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_time_for_max_multiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_time_min",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedLiquidityOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedStakesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrationsOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrator_stakeLocked_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrator_withdraw_locked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVeFXSForMaxBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRate0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRate1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsCollectionPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockedStakeTimeForMinAndMaxMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVeFXS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerAllowMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerDisallowMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "staker_allowed_migrators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakesUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timelock_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleMigrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleRewardsCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCombinedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidityLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ttlRew0Owed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ttlRew0Paid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ttlRew1Owed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ttlRew1Paid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakedFrax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valid_migrators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "veFXSMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vefxs_max_multiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vefxs_per_frax_for_max_boost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalsPaused",
    data: BytesLike
  ): Result;

  events: {
    "LockedStakeMaxMultiplierUpdated(uint256)": EventFragment;
    "LockedStakeMinTime(uint256)": EventFragment;
    "LockedStakeTimeForMaxMultiplier(uint256)": EventFragment;
    "MaxVeFXSMultiplier(uint256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "RewardPaid(address,uint256,address,address)": EventFragment;
    "RewardsDurationUpdated(uint256)": EventFragment;
    "RewardsPeriodRenewed(address)": EventFragment;
    "StakeLocked(address,uint256,uint256,bytes32,address)": EventFragment;
    "WithdrawLocked(address,uint256,bytes32,address)": EventFragment;
    "veFXSPerFraxForMaxBoostUpdated(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "LockedStakeMaxMultiplierUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedStakeMinTime"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LockedStakeTimeForMaxMultiplier"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxVeFXSMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsPeriodRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "veFXSPerFraxForMaxBoostUpdated"
  ): EventFragment;
}

export class FraxCrossChainFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FraxCrossChainFarmInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_vefxs_multiplier: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    controller_address(overrides?: CallOverrides): Promise<[string]>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    fraxPerLPToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardForDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    greylist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    greylistAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock_max_multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    lock_time_for_max_multiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock_time_min(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedStakesOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          kek_id: string;
          start_timestamp: BigNumber;
          liquidity: BigNumber;
          ending_timestamp: BigNumber;
          lock_multiplier: BigNumber;
        })[]
      ]
    >;

    migrationsOn(overrides?: CallOverrides): Promise<[boolean]>;

    migrator_stakeLocked_for(
      staker_address: string,
      amount: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrator_withdraw_locked(
      staker_address: string,
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minVeFXSForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    rewardRate0(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRate1(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards0(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards1(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsCollectionPaused(overrides?: CallOverrides): Promise<[boolean]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    setController(
      _controller_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockedStakeTimeForMinAndMaxMultiplier(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultipliers(
      _lock_max_multiplier: BigNumberish,
      _vefxs_max_multiplier: BigNumberish,
      _vefxs_per_frax_for_max_boost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardsDuration(
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimelock(
      _new_timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVeFXS(
      _vefxs_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeLocked(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakerAllowMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakerDisallowMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staker_allowed_migrators(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stakesUnlocked(overrides?: CallOverrides): Promise<[boolean]>;

    stakingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timelock_address(overrides?: CallOverrides): Promise<[string]>;

    toggleMigrations(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleRewardsCollection(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleWithdrawals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalCombinedWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLiquidityLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    ttlRew0Owed(overrides?: CallOverrides): Promise<[BigNumber]>;

    ttlRew0Paid(overrides?: CallOverrides): Promise<[BigNumber]>;

    ttlRew1Owed(overrides?: CallOverrides): Promise<[BigNumber]>;

    ttlRew1Paid(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockStakes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userRewardPerTokenPaid0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userRewardPerTokenPaid1(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userStakedFrax(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    valid_migrators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    veFXSMultiplier(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vefxs_max_multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    vefxs_per_frax_for_max_boost(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawLocked(
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<[boolean]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMigrator(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcCurCombinedWeight(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      old_combined_weight: BigNumber;
      new_vefxs_multiplier: BigNumber;
      new_combined_weight: BigNumber;
    }
  >;

  combinedWeightOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  controller_address(overrides?: CallOverrides): Promise<string>;

  earned(
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  fraxPerLPToken(overrides?: CallOverrides): Promise<BigNumber>;

  getReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardForDuration(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  greylist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  greylistAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  lockMultiplier(
    secs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  lock_time_for_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  lock_time_min(overrides?: CallOverrides): Promise<BigNumber>;

  lockedLiquidityOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedStakesOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      kek_id: string;
      start_timestamp: BigNumber;
      liquidity: BigNumber;
      ending_timestamp: BigNumber;
      lock_multiplier: BigNumber;
    })[]
  >;

  migrationsOn(overrides?: CallOverrides): Promise<boolean>;

  migrator_stakeLocked_for(
    staker_address: string,
    amount: BigNumberish,
    secs: BigNumberish,
    start_timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrator_withdraw_locked(
    staker_address: string,
    kek_id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minVeFXSForMaxBoost(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMigrator(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  rewardRate0(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate1(overrides?: CallOverrides): Promise<BigNumber>;

  rewards0(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewards1(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardsCollectionPaused(overrides?: CallOverrides): Promise<boolean>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  setController(
    _controller_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockedStakeTimeForMinAndMaxMultiplier(
    _lock_time_for_max_multiplier: BigNumberish,
    _lock_time_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultipliers(
    _lock_max_multiplier: BigNumberish,
    _vefxs_max_multiplier: BigNumberish,
    _vefxs_per_frax_for_max_boost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardsDuration(
    _rewardsDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimelock(
    _new_timelock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVeFXS(
    _vefxs_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeLocked(
    liquidity: BigNumberish,
    secs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakerAllowMigrator(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakerDisallowMigrator(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staker_allowed_migrators(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stakesUnlocked(overrides?: CallOverrides): Promise<boolean>;

  stakingPaused(overrides?: CallOverrides): Promise<boolean>;

  sync(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timelock_address(overrides?: CallOverrides): Promise<string>;

  toggleMigrations(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleRewardsCollection(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleStaking(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleWithdrawals(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalCombinedWeight(overrides?: CallOverrides): Promise<BigNumber>;

  totalLiquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

  ttlRew0Owed(overrides?: CallOverrides): Promise<BigNumber>;

  ttlRew0Paid(overrides?: CallOverrides): Promise<BigNumber>;

  ttlRew1Owed(overrides?: CallOverrides): Promise<BigNumber>;

  ttlRew1Paid(overrides?: CallOverrides): Promise<BigNumber>;

  unlockStakes(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userRewardPerTokenPaid0(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userRewardPerTokenPaid1(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userStakedFrax(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valid_migrators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  veFXSMultiplier(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vefxs_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  vefxs_per_frax_for_max_boost(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawLocked(
    kek_id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalsPaused(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addMigrator(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_vefxs_multiplier: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller_address(overrides?: CallOverrides): Promise<string>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    fraxPerLPToken(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getRewardForDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    greylist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    greylistAddress(_address: string, overrides?: CallOverrides): Promise<void>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    lock_time_for_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    lock_time_min(overrides?: CallOverrides): Promise<BigNumber>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedStakesOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        kek_id: string;
        start_timestamp: BigNumber;
        liquidity: BigNumber;
        ending_timestamp: BigNumber;
        lock_multiplier: BigNumber;
      })[]
    >;

    migrationsOn(overrides?: CallOverrides): Promise<boolean>;

    migrator_stakeLocked_for(
      staker_address: string,
      amount: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrator_withdraw_locked(
      staker_address: string,
      kek_id: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    minVeFXSForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMigrator(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    rewardRate0(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate1(overrides?: CallOverrides): Promise<BigNumber>;

    rewards0(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewards1(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsCollectionPaused(overrides?: CallOverrides): Promise<boolean>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockedStakeTimeForMinAndMaxMultiplier(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultipliers(
      _lock_max_multiplier: BigNumberish,
      _vefxs_max_multiplier: BigNumberish,
      _vefxs_per_frax_for_max_boost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsDuration(
      _rewardsDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimelock(
      _new_timelock: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVeFXS(_vefxs_address: string, overrides?: CallOverrides): Promise<void>;

    stakeLocked(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakerAllowMigrator(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakerDisallowMigrator(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    staker_allowed_migrators(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stakesUnlocked(overrides?: CallOverrides): Promise<boolean>;

    stakingPaused(overrides?: CallOverrides): Promise<boolean>;

    sync(overrides?: CallOverrides): Promise<void>;

    timelock_address(overrides?: CallOverrides): Promise<string>;

    toggleMigrations(overrides?: CallOverrides): Promise<void>;

    toggleRewardsCollection(overrides?: CallOverrides): Promise<void>;

    toggleStaking(overrides?: CallOverrides): Promise<void>;

    toggleWithdrawals(overrides?: CallOverrides): Promise<void>;

    totalCombinedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

    ttlRew0Owed(overrides?: CallOverrides): Promise<BigNumber>;

    ttlRew0Paid(overrides?: CallOverrides): Promise<BigNumber>;

    ttlRew1Owed(overrides?: CallOverrides): Promise<BigNumber>;

    ttlRew1Paid(overrides?: CallOverrides): Promise<BigNumber>;

    unlockStakes(overrides?: CallOverrides): Promise<void>;

    userRewardPerTokenPaid0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewardPerTokenPaid1(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStakedFrax(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valid_migrators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    veFXSMultiplier(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vefxs_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    vefxs_per_frax_for_max_boost(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLocked(kek_id: BytesLike, overrides?: CallOverrides): Promise<void>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    LockedStakeMaxMultiplierUpdated(
      multiplier?: null
    ): TypedEventFilter<[BigNumber], { multiplier: BigNumber }>;

    LockedStakeMinTime(
      secs?: null
    ): TypedEventFilter<[BigNumber], { secs: BigNumber }>;

    LockedStakeTimeForMaxMultiplier(
      secs?: null
    ): TypedEventFilter<[BigNumber], { secs: BigNumber }>;

    MaxVeFXSMultiplier(
      multiplier?: null
    ): TypedEventFilter<[BigNumber], { multiplier: BigNumber }>;

    OwnerChanged(
      oldOwner?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    OwnerNominated(
      newOwner?: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    Recovered(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    RewardPaid(
      user?: string | null,
      reward?: null,
      token_address?: null,
      destination_address?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        user: string;
        reward: BigNumber;
        token_address: string;
        destination_address: string;
      }
    >;

    RewardsDurationUpdated(
      newDuration?: null
    ): TypedEventFilter<[BigNumber], { newDuration: BigNumber }>;

    RewardsPeriodRenewed(
      token?: null
    ): TypedEventFilter<[string], { token: string }>;

    StakeLocked(
      user?: string | null,
      amount?: null,
      secs?: null,
      kek_id?: null,
      source_address?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        user: string;
        amount: BigNumber;
        secs: BigNumber;
        kek_id: string;
        source_address: string;
      }
    >;

    WithdrawLocked(
      user?: string | null,
      amount?: null,
      kek_id?: null,
      destination_address?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        user: string;
        amount: BigNumber;
        kek_id: string;
        destination_address: string;
      }
    >;

    veFXSPerFraxForMaxBoostUpdated(
      scale_factor?: null
    ): TypedEventFilter<[BigNumber], { scale_factor: BigNumber }>;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller_address(overrides?: CallOverrides): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    fraxPerLPToken(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber>;

    greylist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    greylistAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    lock_time_for_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    lock_time_min(overrides?: CallOverrides): Promise<BigNumber>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedStakesOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrationsOn(overrides?: CallOverrides): Promise<BigNumber>;

    migrator_stakeLocked_for(
      staker_address: string,
      amount: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrator_withdraw_locked(
      staker_address: string,
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minVeFXSForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate0(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate1(overrides?: CallOverrides): Promise<BigNumber>;

    rewards0(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewards1(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsCollectionPaused(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockedStakeTimeForMinAndMaxMultiplier(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultipliers(
      _lock_max_multiplier: BigNumberish,
      _vefxs_max_multiplier: BigNumberish,
      _vefxs_per_frax_for_max_boost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardsDuration(
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimelock(
      _new_timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVeFXS(
      _vefxs_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeLocked(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakerAllowMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakerDisallowMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staker_allowed_migrators(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakesUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

    stakingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timelock_address(overrides?: CallOverrides): Promise<BigNumber>;

    toggleMigrations(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleRewardsCollection(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleWithdrawals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalCombinedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

    ttlRew0Owed(overrides?: CallOverrides): Promise<BigNumber>;

    ttlRew0Paid(overrides?: CallOverrides): Promise<BigNumber>;

    ttlRew1Owed(overrides?: CallOverrides): Promise<BigNumber>;

    ttlRew1Paid(overrides?: CallOverrides): Promise<BigNumber>;

    unlockStakes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userRewardPerTokenPaid0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewardPerTokenPaid1(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStakedFrax(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valid_migrators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veFXSMultiplier(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vefxs_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    vefxs_per_frax_for_max_boost(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLocked(
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller_address(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fraxPerLPToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    greylist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    greylistAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock_max_multiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock_time_for_max_multiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock_time_min(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedStakesOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrationsOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrator_stakeLocked_for(
      staker_address: string,
      amount: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrator_withdraw_locked(
      staker_address: string,
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minVeFXSForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRate0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRate1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards1(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsCollectionPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setController(
      _controller_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockedStakeTimeForMinAndMaxMultiplier(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultipliers(
      _lock_max_multiplier: BigNumberish,
      _vefxs_max_multiplier: BigNumberish,
      _vefxs_per_frax_for_max_boost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsDuration(
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _new_timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVeFXS(
      _vefxs_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeLocked(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakerAllowMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakerDisallowMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staker_allowed_migrators(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakesUnlocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timelock_address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleMigrations(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleRewardsCollection(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleWithdrawals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalCombinedWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLiquidityLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ttlRew0Owed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ttlRew0Paid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ttlRew1Owed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ttlRew1Paid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockStakes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid0(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid1(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStakedFrax(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valid_migrators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veFXSMultiplier(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vefxs_max_multiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vefxs_per_frax_for_max_boost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawLocked(
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
