/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface EmissionsControllerInterface extends ethers.utils.Interface {
  functions: {
    'REWARD_TOKEN()': FunctionFragment
    'addDial(address,uint8,bool)': FunctionFragment
    'addStakingContract(address)': FunctionFragment
    'calculateRewards()': FunctionFragment
    'dials(uint256)': FunctionFragment
    'distributeRewards(uint256[])': FunctionFragment
    'donate(uint256[],uint256[])': FunctionFragment
    'epochs()': FunctionFragment
    'getDialRecipient(uint256)': FunctionFragment
    'getDialVoteHistory(uint256)': FunctionFragment
    'getDialVotes()': FunctionFragment
    'getVoterPreferences(address)': FunctionFragment
    'getVotes(address)': FunctionFragment
    'initialize(address[],uint8[],bool[],address[])': FunctionFragment
    'moveVotingPowerHook(address,address,uint256)': FunctionFragment
    'nexus()': FunctionFragment
    'pokeSources(address)': FunctionFragment
    'setVoterDialWeights(tuple[])': FunctionFragment
    'stakingContractAddTime(address)': FunctionFragment
    'stakingContracts(uint256)': FunctionFragment
    'topLineEmission(uint32)': FunctionFragment
    'updateDial(uint256,bool)': FunctionFragment
    'voterPreferences(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'REWARD_TOKEN', values?: undefined): string
  encodeFunctionData(functionFragment: 'addDial', values: [string, BigNumberish, boolean]): string
  encodeFunctionData(functionFragment: 'addStakingContract', values: [string]): string
  encodeFunctionData(functionFragment: 'calculateRewards', values?: undefined): string
  encodeFunctionData(functionFragment: 'dials', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'distributeRewards', values: [BigNumberish[]]): string
  encodeFunctionData(functionFragment: 'donate', values: [BigNumberish[], BigNumberish[]]): string
  encodeFunctionData(functionFragment: 'epochs', values?: undefined): string
  encodeFunctionData(functionFragment: 'getDialRecipient', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getDialVoteHistory', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getDialVotes', values?: undefined): string
  encodeFunctionData(functionFragment: 'getVoterPreferences', values: [string]): string
  encodeFunctionData(functionFragment: 'getVotes', values: [string]): string
  encodeFunctionData(functionFragment: 'initialize', values: [string[], BigNumberish[], boolean[], string[]]): string
  encodeFunctionData(functionFragment: 'moveVotingPowerHook', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'nexus', values?: undefined): string
  encodeFunctionData(functionFragment: 'pokeSources', values: [string]): string
  encodeFunctionData(functionFragment: 'setVoterDialWeights', values: [{ dialId: BigNumberish; weight: BigNumberish }[]]): string
  encodeFunctionData(functionFragment: 'stakingContractAddTime', values: [string]): string
  encodeFunctionData(functionFragment: 'stakingContracts', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'topLineEmission', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'updateDial', values: [BigNumberish, boolean]): string
  encodeFunctionData(functionFragment: 'voterPreferences', values: [string]): string

  decodeFunctionResult(functionFragment: 'REWARD_TOKEN', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addDial', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addStakingContract', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'calculateRewards', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'dials', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'distributeRewards', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'donate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'epochs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getDialRecipient', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getDialVoteHistory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getDialVotes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getVoterPreferences', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getVotes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'moveVotingPowerHook', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nexus', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pokeSources', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setVoterDialWeights', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakingContractAddTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakingContracts', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'topLineEmission', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateDial', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'voterPreferences', data: BytesLike): Result

  events: {
    'AddStakingContract(address)': EventFragment
    'AddedDial(uint256,address)': EventFragment
    'DistributedReward(uint256,uint256)': EventFragment
    'DonatedRewards(uint256,uint256)': EventFragment
    'PeriodRewards(uint256[])': EventFragment
    'PreferencesChanged(address,tuple[])': EventFragment
    'SourcesPoked(address,uint256)': EventFragment
    'UpdatedDial(uint256,bool)': EventFragment
    'VotesCast(address,address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AddStakingContract'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AddedDial'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DistributedReward'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DonatedRewards'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PeriodRewards'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PreferencesChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SourcesPoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdatedDial'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'VotesCast'): EventFragment
}

export class EmissionsController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: EmissionsControllerInterface

  functions: {
    REWARD_TOKEN(overrides?: CallOverrides): Promise<[string]>

    addDial(
      _recipient: string,
      _cap: BigNumberish,
      _notify: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    addStakingContract(_stakingContract: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    calculateRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    dials(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, boolean, number, BigNumber, string] & {
        disabled: boolean
        notify: boolean
        cap: number
        balance: BigNumber
        recipient: string
      }
    >

    distributeRewards(_dialIds: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    donate(
      _dialIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    epochs(overrides?: CallOverrides): Promise<[number, number] & { startEpoch: number; lastEpoch: number }>

    getDialRecipient(dialId: BigNumberish, overrides?: CallOverrides): Promise<[string] & { recipient: string }>

    getDialVoteHistory(
      dialId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [([BigNumber, number] & { votes: BigNumber; epoch: number })[]] & {
        voteHistory: ([BigNumber, number] & {
          votes: BigNumber
          epoch: number
        })[]
      }
    >

    getDialVotes(overrides?: CallOverrides): Promise<[BigNumber[]] & { dialVotes: BigNumber[] }>

    getVoterPreferences(
      voter: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        ],
      ] & {
        preferences: [
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
          [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        ]
      }
    >

    getVotes(account: string, overrides?: CallOverrides): Promise<[BigNumber] & { votingPower: BigNumber }>

    initialize(
      _recipients: string[],
      _caps: BigNumberish[],
      _notifies: boolean[],
      _stakingContracts: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    moveVotingPowerHook(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    nexus(overrides?: CallOverrides): Promise<[string]>

    pokeSources(_voter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    setVoterDialWeights(
      _preferences: { dialId: BigNumberish; weight: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    stakingContractAddTime(arg0: string, overrides?: CallOverrides): Promise<[number]>

    stakingContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    topLineEmission(epoch: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { emissionForEpoch: BigNumber }>

    updateDial(
      _dialId: BigNumberish,
      _disabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    voterPreferences(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, number] & {
        dialWeights: BigNumber
        votesCast: BigNumber
        lastSourcePoke: number
      }
    >
  }

  REWARD_TOKEN(overrides?: CallOverrides): Promise<string>

  addDial(
    _recipient: string,
    _cap: BigNumberish,
    _notify: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  addStakingContract(_stakingContract: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  calculateRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  dials(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, boolean, number, BigNumber, string] & {
      disabled: boolean
      notify: boolean
      cap: number
      balance: BigNumber
      recipient: string
    }
  >

  distributeRewards(_dialIds: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  donate(
    _dialIds: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  epochs(overrides?: CallOverrides): Promise<[number, number] & { startEpoch: number; lastEpoch: number }>

  getDialRecipient(dialId: BigNumberish, overrides?: CallOverrides): Promise<string>

  getDialVoteHistory(
    dialId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<([BigNumber, number] & { votes: BigNumber; epoch: number })[]>

  getDialVotes(overrides?: CallOverrides): Promise<BigNumber[]>

  getVoterPreferences(
    voter: string,
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
    ]
  >

  getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>

  initialize(
    _recipients: string[],
    _caps: BigNumberish[],
    _notifies: boolean[],
    _stakingContracts: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  moveVotingPowerHook(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  nexus(overrides?: CallOverrides): Promise<string>

  pokeSources(_voter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  setVoterDialWeights(
    _preferences: { dialId: BigNumberish; weight: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  stakingContractAddTime(arg0: string, overrides?: CallOverrides): Promise<number>

  stakingContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  topLineEmission(epoch: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  updateDial(
    _dialId: BigNumberish,
    _disabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  voterPreferences(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, number] & {
      dialWeights: BigNumber
      votesCast: BigNumber
      lastSourcePoke: number
    }
  >

  callStatic: {
    REWARD_TOKEN(overrides?: CallOverrides): Promise<string>

    addDial(_recipient: string, _cap: BigNumberish, _notify: boolean, overrides?: CallOverrides): Promise<void>

    addStakingContract(_stakingContract: string, overrides?: CallOverrides): Promise<void>

    calculateRewards(overrides?: CallOverrides): Promise<void>

    dials(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, boolean, number, BigNumber, string] & {
        disabled: boolean
        notify: boolean
        cap: number
        balance: BigNumber
        recipient: string
      }
    >

    distributeRewards(_dialIds: BigNumberish[], overrides?: CallOverrides): Promise<void>

    donate(_dialIds: BigNumberish[], _amounts: BigNumberish[], overrides?: CallOverrides): Promise<void>

    epochs(overrides?: CallOverrides): Promise<[number, number] & { startEpoch: number; lastEpoch: number }>

    getDialRecipient(dialId: BigNumberish, overrides?: CallOverrides): Promise<string>

    getDialVoteHistory(
      dialId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<([BigNumber, number] & { votes: BigNumber; epoch: number })[]>

    getDialVotes(overrides?: CallOverrides): Promise<BigNumber[]>

    getVoterPreferences(
      voter: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
        [BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber },
      ]
    >

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _recipients: string[],
      _caps: BigNumberish[],
      _notifies: boolean[],
      _stakingContracts: string[],
      overrides?: CallOverrides,
    ): Promise<void>

    moveVotingPowerHook(from: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    nexus(overrides?: CallOverrides): Promise<string>

    pokeSources(_voter: string, overrides?: CallOverrides): Promise<void>

    setVoterDialWeights(_preferences: { dialId: BigNumberish; weight: BigNumberish }[], overrides?: CallOverrides): Promise<void>

    stakingContractAddTime(arg0: string, overrides?: CallOverrides): Promise<number>

    stakingContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    topLineEmission(epoch: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    updateDial(_dialId: BigNumberish, _disabled: boolean, overrides?: CallOverrides): Promise<void>

    voterPreferences(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, number] & {
        dialWeights: BigNumber
        votesCast: BigNumber
        lastSourcePoke: number
      }
    >
  }

  filters: {
    AddStakingContract(stakingContract?: string | null): TypedEventFilter<[string], { stakingContract: string }>

    AddedDial(
      dialId?: BigNumberish | null,
      recipient?: string | null,
    ): TypedEventFilter<[BigNumber, string], { dialId: BigNumber; recipient: string }>

    DistributedReward(
      dialId?: BigNumberish | null,
      amount?: null,
    ): TypedEventFilter<[BigNumber, BigNumber], { dialId: BigNumber; amount: BigNumber }>

    DonatedRewards(
      dialId?: BigNumberish | null,
      amount?: null,
    ): TypedEventFilter<[BigNumber, BigNumber], { dialId: BigNumber; amount: BigNumber }>

    PeriodRewards(amounts?: null): TypedEventFilter<[BigNumber[]], { amounts: BigNumber[] }>

    PreferencesChanged(
      voter?: string | null,
      preferences?: null,
    ): TypedEventFilter<
      [string, ([BigNumber, BigNumber] & { dialId: BigNumber; weight: BigNumber })[]],
      {
        voter: string
        preferences: ([BigNumber, BigNumber] & {
          dialId: BigNumber
          weight: BigNumber
        })[]
      }
    >

    SourcesPoked(
      voter?: string | null,
      newVotesCast?: null,
    ): TypedEventFilter<[string, BigNumber], { voter: string; newVotesCast: BigNumber }>

    UpdatedDial(
      dialId?: BigNumberish | null,
      disabled?: null,
    ): TypedEventFilter<[BigNumber, boolean], { dialId: BigNumber; disabled: boolean }>

    VotesCast(
      stakingContract?: null,
      from?: string | null,
      to?: string | null,
      amount?: null,
    ): TypedEventFilter<[string, string, string, BigNumber], { stakingContract: string; from: string; to: string; amount: BigNumber }>
  }

  estimateGas: {
    REWARD_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

    addDial(
      _recipient: string,
      _cap: BigNumberish,
      _notify: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    addStakingContract(_stakingContract: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    calculateRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    dials(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    distributeRewards(_dialIds: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    donate(
      _dialIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    epochs(overrides?: CallOverrides): Promise<BigNumber>

    getDialRecipient(dialId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getDialVoteHistory(dialId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getDialVotes(overrides?: CallOverrides): Promise<BigNumber>

    getVoterPreferences(voter: string, overrides?: CallOverrides): Promise<BigNumber>

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _recipients: string[],
      _caps: BigNumberish[],
      _notifies: boolean[],
      _stakingContracts: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    moveVotingPowerHook(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    nexus(overrides?: CallOverrides): Promise<BigNumber>

    pokeSources(_voter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setVoterDialWeights(
      _preferences: { dialId: BigNumberish; weight: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    stakingContractAddTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    stakingContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    topLineEmission(epoch: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    updateDial(_dialId: BigNumberish, _disabled: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    voterPreferences(arg0: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    REWARD_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addDial(
      _recipient: string,
      _cap: BigNumberish,
      _notify: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    addStakingContract(_stakingContract: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    calculateRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    dials(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    distributeRewards(_dialIds: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    donate(
      _dialIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    epochs(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getDialRecipient(dialId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getDialVoteHistory(dialId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getDialVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getVoterPreferences(voter: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getVotes(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _recipients: string[],
      _caps: BigNumberish[],
      _notifies: boolean[],
      _stakingContracts: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    moveVotingPowerHook(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    nexus(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pokeSources(_voter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    setVoterDialWeights(
      _preferences: { dialId: BigNumberish; weight: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    stakingContractAddTime(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    stakingContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    topLineEmission(epoch: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    updateDial(
      _dialId: BigNumberish,
      _disabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    voterPreferences(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
